//
//  ChooseDestinationViewController.swift
//  ios
//
//  Created by Maarten Vergouwe on 15/07/2020.
//  Copyright (c) 2020 Givt. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class ChooseDestinationViewController: UIViewController, UITableViewDataSource, UITableViewDelegate, UISearchBarDelegate
{
    var destinations = [DestinationViewModel]()
    var filteredDestinations = [DestinationViewModel]()
    var sections = [TableSection]()
    var mediater: MediaterProtocol = Mediater.shared
    
    @IBOutlet weak var backButton: UIBarButtonItem!
    @IBOutlet var titleText: UILabel!
    @IBOutlet var typeStackView: UIStackView!
    @IBOutlet var searchBar: UISearchBar!
    @IBOutlet var tableView: UITableView!
    @IBOutlet var navBar: UINavigationItem!
    @IBOutlet var btnGive: CustomButton!

    var churchButton: DestinationCategoryButton!
    var charityButton: DestinationCategoryButton!
    var campaignButton: DestinationCategoryButton!
    var artistButton: DestinationCategoryButton!

    func numberOfSections(in tableView: UITableView) -> Int {
        return sections.count
    }
    
    func sectionIndexTitles(for tableView: UITableView) -> [String]? {
        return sections.map { $0.title }
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return sections[section].length
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let destination = filteredDestinations[sections[indexPath.section].index + indexPath.row]
        let destinationCell = tableView.dequeueReusableCell(withIdentifier: String(describing: DestinationTableCell.self), for: indexPath) as! DestinationTableCell
        destinationCell.name = destination.name
        destinationCell.type = destination.type
        return destinationCell
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        navigationController?.navigationBar.setBackgroundImage(UIImage(), for: .default)
        navigationController?.navigationBar.backgroundColor = UIColor(red: 0.0, green: 0.0, blue: 0.0, alpha: 0.0)
        navigationController?.navigationBar.isTranslucent = true

        searchBar.delegate = self

        tableView.dataSource = self
        tableView.delegate = self
        tableView.rowHeight = UITableViewAutomaticDimension
        tableView.estimatedRowHeight = 50
        tableView.sectionIndexMinimumDisplayRowCount = 20
        tableView.sectionIndexColor = #colorLiteral(red: 0.1803921569, green: 0.1607843137, blue: 0.3411764706, alpha: 1)
        tableView.sectionIndexBackgroundColor = #colorLiteral(red: 1, green: 1, blue: 1, alpha: 0)
        tableView.tableFooterView = UIView(frame: .zero)

        btnGive.setTitle(NSLocalizedString("Give", comment: "Button to give"), for: UIControlState.normal)
        btnGive.isEnabled = false
        backButton.accessibilityLabel = NSLocalizedString("Back", comment: "")
        churchButton = DestinationCategoryButton(color: #colorLiteral(red: 0.1843137255, green: 0.5058823529, blue: 0.7843137255, alpha: 1), imageWhenInactive: #imageLiteral(resourceName: "church_white"), imageWhenActive: #imageLiteral(resourceName: "sugg_church_white"), labelText: NSLocalizedString("Church", comment: ""), tag: CollectGroupType.church.rawValue)
        churchButton.addTapGesture(self, action: #selector(categoryButtonTapped(_:)))
        charityButton = DestinationCategoryButton(color: #colorLiteral(red: 0.9294117647, green: 0.6470588235, blue: 0.1803921569, alpha: 1), imageWhenInactive: #imageLiteral(resourceName: "stichting_white"), imageWhenActive: #imageLiteral(resourceName: "sugg_stichting_white"), labelText: NSLocalizedString("Charity", comment: ""), tag: CollectGroupType.charity.rawValue)
        charityButton.addTapGesture(self, action: #selector(categoryButtonTapped(_:)))
        campaignButton = DestinationCategoryButton(color: #colorLiteral(red: 0.9460871816, green: 0.4409908056, blue: 0.3430213332, alpha: 1), imageWhenInactive: #imageLiteral(resourceName: "actions_white"), imageWhenActive: #imageLiteral(resourceName: "sugg_actions_white"), labelText: NSLocalizedString("Campaign", comment: ""), tag: CollectGroupType.campaign.rawValue)
        campaignButton.addTapGesture(self, action: #selector(categoryButtonTapped(_:)))
        artistButton = DestinationCategoryButton(color: #colorLiteral(red: 0.1137254902, green: 0.662745098, blue: 0.4235294118, alpha: 1), imageWhenInactive: #imageLiteral(resourceName: "artist"), imageWhenActive: #imageLiteral(resourceName: "artist_white"), labelText: NSLocalizedString("Artist", comment: ""), tag: CollectGroupType.artist.rawValue)
        artistButton.addTapGesture(self, action: #selector(categoryButtonTapped(_:)))
        typeStackView.addArrangedSubview(churchButton)
        typeStackView.addArrangedSubview(charityButton)
        typeStackView.addArrangedSubview(campaignButton)
        typeStackView.addArrangedSubview(artistButton)
        
        loadDestinations()
        filterDestinationsAndReloadTable(categoryType: nil)
    }
    
    @objc func categoryButtonTapped(_ sender: UITapGestureRecognizer) {
        if let button = sender.view as? DestinationCategoryButton {
            //replace already active button with inactive button
            if let prevButton = (typeStackView.arrangedSubviews.filter { view in
                let btn = view as? DestinationCategoryButton
                return button != btn && btn?.active ?? false
            }.first as? DestinationCategoryButton) {
                let idx = typeStackView.arrangedSubviews.index(of: prevButton)
                typeStackView.removeArrangedSubview(prevButton)
                prevButton.removeFromSuperview()
                prevButton.setInactive()
                typeStackView.insertArrangedSubview(prevButton, at: idx!)
            }

            //replace tapped button with newly styled button
            if let idx = typeStackView.arrangedSubviews.index(of: button) {
                typeStackView.removeArrangedSubview(button)
                button.removeFromSuperview()
                button.active ? button.setInactive() : button.setActive()
                typeStackView.insertArrangedSubview(button, at: idx)
            }
            
            //filter table
            button.active ? filterDestinationsAndReloadTable(categoryType: CollectGroupType(rawValue: button.tag)) : filterDestinationsAndReloadTable(categoryType: nil)
        }
    }
    
    private func loadDestinations() {
        let userDetail = try? mediater.send(request: GetUserDetailQuery())
        try? mediater.sendAsync(request: GetCollectGroupsQuery()) { response in
            self.destinations = response
                .filter { $0.paymentType == userDetail?.paymentType }
                .map { cg in
                    let destination = DestinationViewModel()
                    destination.name = cg.name
                    destination.type = cg.type                    
                    return destination
                }
        }
    }
    
    private func filterDestinationsAndReloadTable(categoryType: CollectGroupType?) {
        if let categoryType = categoryType {
            filteredDestinations = destinations.filter { $0.type == categoryType }
        } else {
            filteredDestinations = destinations
        }
        self.sections = TableSectionBuilder.build(input: self.filteredDestinations)
        self.tableView.reloadData()
    }
}
